sd2iec - a controller/interface adapting SD/MMC to the CBM serial bus
Copyright (C) 2007,2008  Ingo Korb <ingo@akana.de>
Parts based on code from others, see comments in main.c for details.
JiffyDos send based on code by M.Kiesel
crc7.c generated by pycrc, see comments in it for pycrc licence.

Free software under GPL version 2 ONLY, see comments in main.c and
COPYING for details.

FIXME:This file still needs to be expanded. A lot.

Introduction:
=============
sd2iec is a device for the Commodore serial bus that allows accessing an SD
or MMC card - think of it as a 1541 with a modern storage medium instead of
disks. The project was inspired by (and uses a few bits of code from)
MMC2IEC[1] by Lars Pontoppidan and runs on the same hardware.

Currently the compatibility is slightly higher than MMC2IEC 0.8, but there
are still lots of features missing. Anything that tries execute code on the
1541 will not work, this includes every software-fastloader.

[1] Homepage: http://pontoppidan.info/lars/index.php?proj=mmc2iec

Supported commands:
===================
- General notes:
  Any command not listed below is currently not supported.
  Long filenames are not supported.

  Subdirectory names in filenames are semi-supported, the syntax is not
  compatible to the CMD drives. The filenames are directly passed to the
  FAT library, so "/test/foo.bar" would access the file FOO.BAR in \TEST.

- Directory filters:
  To show only directories, both =B (CMD-compatible) and =D can be used.
  On a real Commodore drive D matches everything.
  To include hidden files in the directory, use *=H - on a 1541 this doesn't
  do anything. sd2iec marks hidden files with an H after the lock mark,
  i.e. "PRG<H" or "PRG H".

- CD/MD/RD:
  Subdirectory access is compatible to the syntax used by the CMD drives,
  although drive/partition numbers are completely ignored.

  Quick syntax overview:
    CD:_         changes into the parent dir (_ is the left arrow on the C64)
    CD:foo       changes into foo
    CD/foo       changes into foo
    CD:/foo      changes into foo
    CD://foo     changes into \foo
    CD//foo      changes into \foo
    CD/foo/:bar  changes into foo\bar, / before : is required
    CD/foo/bar   changes into foo\bar

    MD uses a syntax similiar to CD and will create the directory listed
    after the colon (:) relative to any directory listed before it.

    MD/foo/:bar  creates bar in foo
    MD//foo/:bar creates bar in \foo

    RD can only remove subdirectories of the current directory.

    RD:foo       deletes foo

  CD is also used to mount/unmount image files. Just change into them
  as if they were a directory and use CD:_ to leave. Please note that
  image files are detected by file extension only and there is no reliable
  way to see if a file is a valid image file.

- S:
  Name matching is fully supported, directories are ignored.

- U1/U2/B-R/B-W
  Block reading and writing is fully supported while a D64 image is mounted.

- B-P
  Supported, not checked against the original rom at all.

- UI+/UI-
  Switching the slightly faster bus protocol for the VC20 on and off works,
  it hasn't been tested much though.

- UI/UJ
  Soft/Hard reset - UI just sets the "73,SD2IEC..." message on the
  error channel, UJ causes a restart of the AVR processor (skipping
  the bootloader if installed).

- X: Extended commands. If you use JiffyDOS, you can send them by using
  @"X..." - without quotes you'll just receive an error.

  - XJ+/XJ-  Set or reset the JiffyDOS protocol support flag. Default state
             is enabled for device address 8+9, disabled for device address
             10+11. This flag can be saved in the EEPROM using XW.

  - XCnum    Set oscillator calibration value to num (must be between
             0 and 255). Default is whatever your chip defaults to. This
             value can be saved in the EEPROM using XW.

  - X        X without any following characters reports the current state
             of all extended parameters via the error channel, similiar
             to DolphinDOS. Example result: "03,J-:C152,00,00"

  - XS:name  Set up a swap list - see "Changing Disk Images" below.
    XS       Disable swap list

  - XW       Store configuration to EEPROM
             This commands stores the current configuration in the EEPROM.
             It will automatically be read when the AVR is reset, so
             any changes you made will persist even after turning off
             the hardware. Currently the only things saved are the
             oscillator calibration and the JiffyDOS protocol support flag.

Software fastloaders:
=====================
There is currently support for one software fastloader in the code. It is
detected by the CRC of its 493 byte long floppy code and the M-E address
0x0303. I've seen the same code under multiple names, among them
"Turbodisk" (both 2.1 and 2.2) and "Fast-Load". Unfortunately the timing
requirements are extremely tight and cannot be met with the internal RC
oscillator of the AVR even if calibrated. You really need an external
8MHz crystal or the data read by the C64 will be gibberish.

JiffyDOS:
=========
The JiffyDOS protocol has very relaxed timing constraints compared to
Turbodisk, but still not as relaxed as the standard Commodore IEC protocol.
Jiffy seems to tolerate slightly mis-tuned RC oscillators, but you still
shouldn't expect it to work without oscillator calibration. If the
frequency error is too big you WILL get wrong data which usually manifests
as a FILE NOT FOUND error because the name the drive received was already
garbled.

M2I files:
==========
M2I files are fully supported. sd2iec supports SEQ and USR files in this
format in addition to PRG and DEL which were already implemented in MMC2IEC.
For compatibility reasons the file type is not checked when opening files.
Inside an M2I file the files are always shown as 0 (DEL) or 1 blocks
because calling stat for every file was slowing down the directory listing
too much.

Changing Disk Images
====================
Because some programs require more than one disk side there is support
for changing the currently mounted disk image with a button connected
from PC4 (for Shadowolfs layout) or PA4 (for LarsPs layout) to ground.

To use this functionality, create a text file that lists the file
names of all disk images you want to swap between, one per line. The
file names are not parsed in any way, so you can include FAT paths of
the disk images if you use / instead of \. After that you can set up
the swap list by sending "XS:filename" over the command channel with
filename being the name of the image list you created (again,
unparsed).

After sending XS the first image in the list is automatically
mounted. To switch to the next image in the list, push the button. If
the new image was mounted successfully both LEDs will blink twice.
When you've reached the last image in the list pushing the button will
mount the first image again. All of this is completely compatible with
normal image mounting/unmounting, so you can unmount the disk image
any time you want and resume the mount cycle later by pushing the
button.

Due to the way this feature is implemented you are not limited to a
swap list containing just D64 images, M2I and even FAT directories
will work too.

If you press the button when no list has been set before or when the
previous list was cleared by sending XS the software will look for a
file called AUTOSWAP.LST in the current (FAT-)directory and use this
as the current swap list until you deactivate it or manually change
the directory (otherwise an AUTOSWAP.LST in the new directory would be
ignored until you send XS, killing the nice "it just works" feeling).

Other important notes:
======================
- File overwrite (@foo) is implemented by deleting the file first.
- File sizes in the directory are in blocks (of 254 bytes), but
  the blocks free message actually reports free clusters. It is
  a compromise of compatibility, accuracy and code size.
- If known, the low byte of the next line link pointer of the directory
  listing will be set to (filesize MOD 254)+2, so you can calculate the
  true size of the file if required. The 2 is added so it can never be
  mistaken for an end marker (0) or for the default value (1, used by at
  least the 1541 and 1571 disk drives).

Compilation notes:
==================
sd2iec is set up to be compiled in multiple configurations, controlled by
configuration files. By default the Makefile looks for a file named
'config', but you can override it by providing the name on the make
command line with "make CONFIG=filename". If you are using *BSD you
may have to edit the Makefile to use another awk implementation
instead of gawk - unfortunately WinAVR compatibility requires
using gawk in there.

An example configuration file named "config-example" is provided with
the source code, as well as abridged files corresponding to the
release binaries. If you want to compile sd2iec for a custom hardware
you may have to edit config.h too to change the port definitions.
